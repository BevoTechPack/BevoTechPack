# Configuration file

Entity {
    # If true, using a portaspawner on an empty minecart will make it into a spawner cart
    B:EnableSpawnerCarts=true
    I:ID.Zoologist=330
}


Machine {

    AutoSpawner {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=60

        # A list of entity IDs (e.g.: CaveSpider or VillagerGolem or Forestry.butterflyGE) to blacklist from the AutoSpawner. The Debugger item will display an entity's ID when used.
        S:Blacklist <
            VillagerGolem
         >
        B:Recipe.Enabled=true

        Cost {
            # The multiplier for work required to generate a mob in exact mode.
            I:Exact=5

            # The multiplier for work required to generate a mob in standard (non-exact) mode.
            I:Standard=1

            ##########################################################################################################
            # Custom
            #--------------------------------------------------------------------------------------------------------#
            # Custom base XP costs for entities. format: I:<entityid> = #. e.g.:
            # I:VillagerGolem = 25
            # I:Slime = 50
            ##########################################################################################################

            Custom {
            }

        }

    }

    Conveyor {
        # If false, conveyors will not grab non-item entities. Breaks conveyor mob grinders but makes them safe for golems, etc.
        B:CaptureNonItems=true

        # If true, conveyors will NEVER capture players regardless of other settings.
        B:NeverCapturePlayers=false

        # If true, conveyors will NEVER capture ThaumCraft golems regardless of other settings.
        B:NeverCaptureTCGolems=false
    }

    ChunkLoader {
        # If true, the Chunk Loader will use the activation energy config in this section. WARNING: this makes it much more expensive at lower values. (non-configurable is exponential)
        B:EnableConfigurableActivationEnergy=false

        # If true, the Chunk Loader will ignore forgeChunkLoading.cfg.
        B:IgnoreChunkLimit=false
        B:Recipe.Enabled=true

        # If true, the Chunk Loader will require that the player who placed it be online to function
        B:RequiresOwnerOnline=false
    }

    LaserDrill {
        B:Recipe.Enabled=true

        # The work required by the drill to generate a single ore.
        I:Work=300
    }

    Unifier {
        # A list of ore dictionary entrys to disable unifying for. By default, MFR will not attempt to unify anything with more than one oredict name.
        S:Blacklist <
            dyeBlue
            dyeWhite
            dyeBrown
            dyeBlack
            listAllwater
            listAllmilk
         >
        B:Recipe.Enabled=true
    }

    Breeder {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=64
        B:Recipe.Enabled=true

        # If the number of entities in the breeder's target area exceeds this value, the breeder will cease operating. This is provided to control server lag.
        I:ShutdownThreshold=50
    }

    Fertilizer {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=96

        # If true, the fertilizer will use bonemeal as well as MFR fertilizer. Provided for those who want a less work-intensive farm.
        B:EnableBonemeal=false
        B:Recipe.Enabled=true
    }

    AutoDisenchanter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32

        # If true, the disenchanter will use essence to disenchant items. Provided for those who want a more work-intensive enchanting system.
        B:EnableEssence=false
        B:Recipe.Enabled=true
    }

    SteamBoiler {
        # If true, the steam boiler will explode if it's hot and dry when you try to pump water into it.
        B:Explodes=false
        B:Recipe.Enabled=true
    }

    Planter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    Fisher {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=2
        B:Recipe.Enabled=true
    }

    Harvester {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=24
        B:Recipe.Enabled=true
    }

    Rancher {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    Vet {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    ItemCollector {
        B:Recipe.Enabled=true
    }

    BlockBreaker {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=96
        B:Recipe.Enabled=true
    }

    WeatherCollector {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    SludgeBoiler {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=3
        B:Recipe.Enabled=true
    }

    Sewer {
        B:Recipe.Enabled=true
    }

    Composter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=4
        B:Recipe.Enabled=true
    }

    Grinder {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=320
        B:Recipe.Enabled=true
    }

    AutoEnchanter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    Chronotyper {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=128
        B:Recipe.Enabled=true
    }

    Ejector {
        B:Recipe.Enabled=true
    }

    ItemRouter {
        B:Recipe.Enabled=true
    }

    LiquidRouter {
        B:Recipe.Enabled=true
    }

    DeepStorageUnit {
        B:Recipe.Enabled=true
    }

    LiquiCrafter {
        B:Recipe.Enabled=true
    }

    LavaFabricator {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=20
        B:Recipe.Enabled=true
    }

    AutoJukebox {
        B:Recipe.Enabled=true
    }

    BioReactor {
        B:Recipe.Enabled=true
    }

    BioFuelGenerator {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    Slaughterhouse {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=100
        B:Recipe.Enabled=true
    }

    MeatPacker {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=2
        B:Recipe.Enabled=true
    }

    EnchantmentRouter {
        B:Recipe.Enabled=true
    }

    LaserDrillPrecharger {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=500
        B:Recipe.Enabled=true
    }

    AutoAnvil {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    BlockSmasher {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    RedNote {
        B:Recipe.Enabled=true
    }

    AutoBrewer {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=4
        B:Recipe.Enabled=true
    }

    FruitPicker {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    BlockPlacer {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    MobCounter {
        B:Recipe.Enabled=true
    }

    SteamTurbine {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    Fountain {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=8
        B:Recipe.Enabled=true
    }

    MobRouter {
        # The energy cost for this machine to complete one work cycle, in units of 10 RF (i.e., 2 DaRF = 20 RF)
        I:ActivationCostDaRF=256
        B:Recipe.Enabled=true
    }

}


RecipeSets {
    # If true, MFR will register its EnderIO-based recipes.
    B:EnderIO=false

    # If true, MFR will register its Thermal Expansion-based recipes.
    B:ThermalExpansion=false

    # If true, MFR will register its standard (vanilla-item-only) recipes.
    B:Vanilla=true
}


entity {
    B:EnableSpawnerCarts=true
    I:ID.Zoologist=330
}


general {
    # Set to false to disable various sounds and aprticle effects, such as when a block is harvested.
    B:PlaySounds=true

    # If true, when you have no empty slots in your inventory, you will continue filling buckets from tanks and drop them on the ground.
    B:Tanks.FillWithoutEmptySlots=true

    searchdistance {
        I:FruitTree.MaxHoriztonal=5
        I:FruitTree.MaxVertical=20
        I:PassengerRail.MaxHorizontal=3
        I:PassengerRail.MaxVertical=2
        I:StackingBlock.MaxVertical=5
        I:Tree.MaxHorizontal=512
        I:Tree.MaxVertical=256
    }

    rednet {
        S:ConnectionBlackList <
         >
        B:Debug=false
    }

    worldgen {
        I:Dimension.Blacklist <
         >

        retrogen {
            B:RubberTrees=true
            B:SewageLakes=false
            B:SludgeLakes=false
        }

        rubbertrees {
            S:Biome.Blacklist <
             >
            S:Biome.Whitelist <
             >
            B:Enable=true
            B:SacredRubberSapling=true
        }

        lakes {
            B:Enable=true

            sludge {
                S:BiomeList <
                 >
                B:BiomeList.Mode=false
                I:Rarity=32
            }

            sewage {
                S:BiomeList <
                 >
                B:BiomeList.Mode=false
                I:Rarity=32
            }

        }

    }

    WorldGen {
        # A list of dimension IDs to disable MFR worldgen in.
        I:Dimension.Blacklist <
         >

        ##########################################################################################################
        # RetroGen
        #--------------------------------------------------------------------------------------------------------#
        # Enable or disable specific retrogen items.
        # Only has an effect if retroactive geneneration is enabled in CoFHCore.
        ##########################################################################################################

        RetroGen {
            B:RubberTrees=true
            B:SewageLakes=false
            B:SludgeLakes=false
        }

        RubberTrees {
            # A list of biomes to disallow rubber trees to spawn in. Overrides any other biomes added.
            S:Biome.Blacklist <
             >

            # A list of biomes to allow rubber trees to spawn in. Does nothing if rubber tree worldgen is disabled.
            S:Biome.Whitelist <
             >

            # Whether or not to generate MFR rubber trees during map generation
            B:Enable=true

            # If true, enable adding Enchanted Sacred Rubber Saplings to stronghold library loot.
            B:SacredRubberSapling=true
        }

        Lakes {
            # Whether or not to generate MFR lakes during map generation. By default, MFR will not attempt lake worldgen in dimensions where the player cannot respawn.
            B:Enable=true

            Sludge {
                # A list of biomes to allow/disallow Sludge lakes to spawn in. Does nothing if lake worldgen is disabled.
                S:BiomeList <
                 >

                # If false, the biome list is a blacklist. If true, the biome list is a whitelist.
                B:BiomeList.Mode=false

                # Higher numbers make sludge lakes rarer. A value of one will be approximately one per chunk. 0 will disable.
                I:Rarity=32
            }

            Sewage {
                # A list of biomes to allow/disallow Sewage lakes to spawn in. Does nothing if lake worldgen is disabled.
                S:BiomeList <
                 >

                # If false, the biome list is a blacklist. If true, the biome list is a whitelist.
                B:BiomeList.Mode=false

                # Higher numbers make Sewage lakes rarer. A value of one will be approximately one per chunk. 0 will disable.
                I:Rarity=32
            }

        }

    }

    SearchDistance {
        # When searching for parts of a fruit tree, how far out to the sides (radius) to search
        I:FruitTree.MaxHoriztonal=5

        # When searching for parts of a fruit tree, how far up to search
        I:FruitTree.MaxVertical=20

        # When searching for players or dropoff locations, how far out to the sides (radius) to search
        I:PassengerRail.MaxHorizontal=3

        # When searching for players or dropoff locations, how far up to search
        I:PassengerRail.MaxVertical=2

        # How far upward to search for members of "stacking" blocks, like cactus and sugarcane
        I:StackingBlock.MaxVertical=5

        # When searching for parts of a tree, how far out to the sides (radius) to search
        I:Tree.MaxHorizontal=512

        # When searching for parts of a tree, how far up to search
        I:Tree.MaxVertical=256
    }

    RedNet {
        # A list of block IDs to prevent RedNet cables from connecting to. (e.g., minecraft:torch)
        S:ConnectionBlackList <
         >

        # If true, RedNet cables will dump a massive amount of data to the log file. You should probably only use this if PC tells you to.
        B:Debug=false
    }

}


item {
    # If true, biofuel will explode when in the nether.
    B:Biofuel.Exploding=true

    # The rate at which fish are dropped from the fishing rod. The drop rate is 1 / this number. Must be greater than 0.
    I:FishDropRate=5

    # If true, only pink slimes larger than tiny will drop pink slimeballs. Provided for those who want a more work-intensive laser drill. (slimes can only be made larger through the slime embiggening syringe)
    B:LargeSlimeDrop=false

    # If true, Empty Syringes will be able to contain liquids and inject players.
    B:LiquidSyringes=true

    # If true, meat will be worth steak saturation instead of cookie saturation.
    B:Meat.IncreasedSaturation=false

    # If true, SPAMRs will explode when they run out of fuel.
    B:SPAMR.Exploding=true

    vanillaoverride {
        B:GlassPanes=true
        B:Ice=true
        B:MilkBucket=true
    }

    recipe {
        B:CheaperChunkLoader=false
        B:CheaperDSU=false
        B:Guns=true
        B:MossyCobble=true
        B:NetLauncher=true
        B:PortaSpawner=true
        B:SingleDSU=true
        B:SmoothSlab=true
        B:Syringes=true
    }

    VanillaOverride {
        # If true, replaces the vanilla milk bucket so milk can be placed in the world.
        B:MilkBucket=true
    }

    Recipe {
        # If true, the ChunkLoader can be built out of cheaper materials. Does nothing if the recipe is disabled.
        B:CheaperChunkLoader=false

        # If true, the DSU can be built out of chests instead of ender pearls. Does nothing if the recipe is disabled.
        B:CheaperDSU=false

        # If true, the Guns will be craftable.
        B:Guns=true

        # If true, mossy cobble can be crafted.
        B:MossyCobble=true

        # If true, the safarinet launcher will be craftable.
        B:NetLauncher=true

        # If true, the PortaSpawner will be craftable.
        B:PortaSpawner=true

        # DSU recipes will always craft one DSU. Does nothing for recipes that already only craft one DSU (cheap mode, etc).
        B:SingleDSU=true

        # If true, smooth double stone slabs can be craftable.
        B:SmoothSlab=true

        # If true, the Syringes will be craftable.
        B:Syringes=true
    }

}


machine {

    conveyor {
        B:CaptureNonItems=true
        B:NeverCapturePlayers=false
        B:NeverCaptureTCGolems=false
    }

    chunkloader {
        B:IgnoreChunkLimit=false
        B:Recipe.Enabled=true
        B:RequiresOwnerOnline=false
    }

    autospawner {
        I:ActivationCostDaRF=60
        S:Blacklist <
            VillagerGolem
         >
        B:Recipe.Enabled=true
        I:Work.Exact=50
        I:Work.Standard=15

        cost {
            I:Exact=5
            I:Standard=1
        }

    }

    laserdrill {
        B:Recipe.Enabled=true
        I:Work=300
    }

    unifier {
        S:Blacklist <
            dyeBlue
            dyeWhite
            dyeBrown
            dyeBlack
            listAllwater
            listAllmilk
         >
        B:Recipe.Enabled=true
    }

    breeder {
        I:ActivationCostDaRF=64
        B:Recipe.Enabled=true
        I:ShutdownThreshold=50
    }

    fertilizer {
        I:ActivationCostDaRF=96
        B:EnableBonemeal=false
        B:Recipe.Enabled=true
    }

    planter {
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    fisher {
        I:ActivationCostDaRF=2
        B:Recipe.Enabled=true
    }

    harvester {
        I:ActivationCostDaRF=24
        B:Recipe.Enabled=true
    }

    rancher {
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    vet {
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    itemcollector {
        B:Recipe.Enabled=true
    }

    blockbreaker {
        I:ActivationCostDaRF=96
        B:Recipe.Enabled=true
    }

    weathercollector {
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    sludgeboiler {
        I:ActivationCostDaRF=3
        B:Recipe.Enabled=true
    }

    sewer {
        B:Recipe.Enabled=true
    }

    composter {
        I:ActivationCostDaRF=4
        B:Recipe.Enabled=true
    }

    grinder {
        I:ActivationCostDaRF=320
        B:Recipe.Enabled=true
    }

    autoenchanter {
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    chronotyper {
        I:ActivationCostDaRF=128
        B:Recipe.Enabled=true
    }

    ejector {
        B:Recipe.Enabled=true
    }

    itemrouter {
        B:Recipe.Enabled=true
    }

    liquidrouter {
        B:Recipe.Enabled=true
    }

    deepstorageunit {
        B:Recipe.Enabled=true
    }

    liquicrafter {
        B:Recipe.Enabled=true
    }

    lavafabricator {
        I:ActivationCostDaRF=20
        B:Recipe.Enabled=true
    }

    steamboiler {
        B:Recipe.Enabled=true
    }

    autojukebox {
        B:Recipe.Enabled=true
    }

    bioreactor {
        B:Recipe.Enabled=true
    }

    biofuelgenerator {
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    autodisenchanter {
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    slaughterhouse {
        I:ActivationCostDaRF=100
        B:Recipe.Enabled=true
    }

    meatpacker {
        I:ActivationCostDaRF=2
        B:Recipe.Enabled=true
    }

    enchantmentrouter {
        B:Recipe.Enabled=true
    }

    laserdrillprecharger {
        I:ActivationCostDaRF=500
        B:Recipe.Enabled=true
    }

    autoanvil {
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    blocksmasher {
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    rednote {
        B:Recipe.Enabled=true
    }

    autobrewer {
        I:ActivationCostDaRF=4
        B:Recipe.Enabled=true
    }

    fruitpicker {
        I:ActivationCostDaRF=32
        B:Recipe.Enabled=true
    }

    blockplacer {
        I:ActivationCostDaRF=1
        B:Recipe.Enabled=true
    }

    mobcounter {
        B:Recipe.Enabled=true
    }

    steamturbine {
        I:ActivationCostDaRF=16
        B:Recipe.Enabled=true
    }

    fountain {
        I:ActivationCostDaRF=8
        B:Recipe.Enabled=true
    }

    mobrouter {
        I:ActivationCostDaRF=256
        B:Recipe.Enabled=true
    }

}


recipesets {
    B:ThermalExpansion=true
    B:Vanilla=false
}


